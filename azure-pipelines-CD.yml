pool:
  name: local

trigger:
  - develop
  - release
  - master

variables:
  - ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
    - name: environment
      value: dev
  - ${{ if eq(variables['Build.SourceBranchName'], 'release') }}:
    - name: environment
      value: test
  - ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    - name: environment
      value: prod
  - group: dummy-${{ variables.environment }}
stages:
  - stage: docker
    displayName: "docker build and push ${{ variables.environment }}"
    jobs:
      - job: docker
        steps:
          - task: Docker@2
            displayName: "docker build and push"
            inputs:
              containerRegistry: 'dockerregistry'
              repository: 'tevolvers/dummy'
              command: 'buildAndPush'
              Dockerfile: 'Dockerfile'
              buildContext: '.'
  - stage: k8s
    dependsOn: docker
    displayName: "k8s deploy on ${{ variables.environment }}"
    jobs:
      - deployment:
        displayName: "operadores ${{ variables.environment }}"
        environment:
          name: $(environment)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Kubernetes@1
                  displayName: "deploy to k8s cluster"
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: 'k8s'
                    namespace: 'bingo'
                    command: 'apply'
                    useConfigurationFile: true
                    configurationType: 'inline'
                    inline: |
                      apiVersion: apps/v1
                      kind: Deployment
                      metadata:
                        labels:
                          app: dummy$(environment)
                          project: bingo
                        name: dummy$(environment)
                        namespace: bingo
                      spec:
                        replicas: 1
                        selector:
                          matchLabels:
                            app: dummy$(environment)
                        template:
                          metadata:
                            labels:
                              app: dummy$(environment)
                          spec:
                            containers:
                            - name: dummy$(environment)
                              image: tevolvers/dummy:$(Build.BuildId)
                              imagePullPolicy: "Always"
                              env:
                              - name: MESSAGE
                                value: $(environment)
                              - name: ID
                                value: "$(Build.BuildId)"
                              - name: SISTEMA
                                value: "$(sistema)"
                              ports:
                              - containerPort: 3000
                            imagePullSecrets:
                            - name: secretregistry
                        strategy:
                          type: RollingUpdate
                          rollingUpdate:
                            maxUnavailable: 1
                            maxSurge: 0
                      ---
                      apiVersion: v1
                      kind: Service
                      metadata:
                        name: dummy$(environment)
                        namespace: bingo
                        labels:
                          app: dummy$(environment)
                          project: bingo
                      spec:
                        type: LoadBalancer
                        ports:
                        - name: http
                          port: 80
                          targetPort: 3000
                        selector:
                          app: dummy$(environment)

  

